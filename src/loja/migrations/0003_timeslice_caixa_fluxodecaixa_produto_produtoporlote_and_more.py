# Generated by Django 5.0.4 on 2024-12-15 21:37

import datetime
import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import util.mixins.model_call_full_clean
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('common', '0003_periodo'),
        ('loja', '0002_grupos_funcionarios'),
    ]

    operations = [
        migrations.CreateModel(
            name='TimeSlice',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('start', models.TimeField()),
                ('end', models.TimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Caixa',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'numero_identificacao',
                    models.CharField(
                        max_length=8,
                        validators=[
                            django.core.validators.RegexValidator(
                                code='invalid_numero_identificacao',
                                message='O número de identificação deve ter exatamente 8 dígitos.',
                                regex='^\\d{8}$',
                            )
                        ],
                    ),
                ),
                ('horario_aberto', models.DateTimeField(blank=True, null=True)),
                ('dinheiro_em_caixa', models.FloatField(default=0.0)),
                ('ativo', models.BooleanField(default=True)),
                (
                    'loja',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='caixas',
                        to='loja.loja',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='FluxoDeCaixa',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('horario_aberto', models.DateTimeField()),
                ('horario_fechado', models.DateTimeField()),
                ('valor_em_caixa', models.FloatField()),
                (
                    'caixa',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='fluxos',
                        to='loja.caixa',
                    ),
                ),
                (
                    'funcionario',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='fluxos',
                        to='loja.funcionario',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Produto',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'descricao',
                    models.CharField(max_length=246, verbose_name='Descrição'),
                ),
                (
                    'preco_de_venda',
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal('1.00'),
                        max_digits=11,
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, 'Preço não pode ser nulo ou negativo.'
                            )
                        ],
                        verbose_name='Preço de venda',
                    ),
                ),
                (
                    'codigo_de_barras',
                    models.CharField(
                        blank=True, max_length=128, verbose_name='Código de barras'
                    ),
                ),
                (
                    'em_venda',
                    models.BooleanField(default=False, verbose_name='À venda'),
                ),
                (
                    'loja',
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='loja.loja',
                        verbose_name='Loja',
                    ),
                ),
            ],
            bases=(util.mixins.model_call_full_clean.ValidateModelMixin, models.Model),
            managers=[
                ('produtos', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProdutoPorLote',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('lote', models.CharField(max_length=128, verbose_name='Lote')),
                (
                    'qtd_em_estoque',
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                0, 'Quantidade não pode ser negativo.'
                            )
                        ],
                        verbose_name='Quantidade',
                    ),
                ),
                (
                    'produto',
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name='lotes',
                        to='loja.produto',
                        verbose_name='Produto',
                    ),
                ),
            ],
            managers=[
                ('produtos_por_lote', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Promocao',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'porcentagem_desconto',
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(
                                100, 'Porcentagem não pode exceder 100%.'
                            ),
                            django.core.validators.MinValueValidator(
                                0, 'Porcentagem não pode ser negativo.'
                            ),
                        ],
                        verbose_name='Porcentagem do desconto',
                    ),
                ),
                (
                    'data_inicio',
                    models.DateField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                datetime.date(2024, 12, 15),
                                'A data de início não pode ser no passado.',
                            )
                        ],
                        verbose_name='Data de início',
                    ),
                ),
                (
                    'descricao',
                    models.CharField(
                        blank=True, max_length=246, verbose_name='Descrição'
                    ),
                ),
                (
                    'loja',
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='loja.loja',
                        verbose_name='Loja',
                    ),
                ),
                (
                    'periodo',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to='common.periodo',
                        verbose_name='Período',
                    ),
                ),
                (
                    'produtos',
                    models.ManyToManyField(
                        default=None,
                        related_name='promocoes',
                        to='loja.produto',
                        verbose_name='Produtos',
                    ),
                ),
            ],
            bases=(util.mixins.model_call_full_clean.ValidateModelMixin, models.Model),
            managers=[
                ('promocoes', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TrabalhoPorDia',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('dia_da_semana', models.IntegerField()),
                (
                    'timeslices',
                    models.ManyToManyField(
                        blank=True, related_name='dias_de_trabalho', to='loja.timeslice'
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='TrabalhaCaixa',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'caixa',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='trabalhos',
                        to='loja.caixa',
                    ),
                ),
                (
                    'caixeiro',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='trabalhos',
                        to='loja.caixeiro',
                    ),
                ),
                (
                    'trabalho_por_dia',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='trabalhos',
                        to='loja.trabalhopordia',
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name='caixa',
            constraint=models.UniqueConstraint(
                fields=('numero_identificacao', 'loja'), name='unique_caixa_per_loja'
            ),
        ),
        migrations.AddConstraint(
            model_name='produtoporlote',
            constraint=models.UniqueConstraint(
                fields=('produto', 'lote'),
                name='unique_produto_lote',
                violation_error_message='O produto já possui este lote.',
            ),
        ),
    ]
